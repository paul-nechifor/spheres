// Generated by CoffeeScript 1.7.1
var Color, Sphere, World, exec, fs, getParams, getPos, getProps, getRgbColor, header, main, render, tmp;

fs = require('fs');

tmp = require('tmp');

exec = require('child_process').exec;

Color = require('color');

exports.getRgbColor = getRgbColor = function(c) {
  return "rgb<" + (c.join(', ')) + ">";
};

exports.getProps = getProps = function(props) {
  var key, list, val;
  list = [];
  for (key in props) {
    val = props[key];
    list.push(key + ' ' + val);
  }
  return list.join(' ');
};

exports.getPos = getPos = function(pos) {
  return '<' + pos.join(',') + '>';
};

getParams = function(opts) {
  var p;
  p = [];
  if (opts.highQuality) {
    p.push('+A0.0001');
    p.push('+R9');
    opts.width = 1920 * 2;
    opts.height = 1080 * 2;
  }
  if (opts.mediumQuality) {
    p.push('+A0.001');
    opts.width = 1920;
    opts.height = 1080;
  }
  p.push('+W' + (opts.width || 960));
  p.push('+H' + (opts.height || 540));
  p.push('+O' + (opts.output || 'output.png'));
  return p;
};

exports.render = render = function(worldStr, opts, cb) {
  return tmp.file({
    postfix: '.pov'
  }, function(err, path, fd, cleanUpCb) {
    var cmd;
    if (err) {
      return cb(err);
    }
    cmd = 'povray ' + getParams(opts).join(' ') + ' ' + path;
    return fs.writeFile(path, worldStr, function(err) {
      if (err) {
        cleanUpCb();
        return cb(err);
      }
      return exec(cmd, function(err, stdout, stderr) {
        cleanUpCb();
        if (err) {
          process.stdout.write(stdout + stderr);
          return cb(err);
        }
        return cb();
      });
    });
  });
};

exports.Sphere = Sphere = (function() {
  function Sphere(pos, radius, color) {
    this.pos = pos;
    this.radius = radius;
    this.pigment = {
      color: getRgbColor(color)
    };
    this.finish = {
      ambient: 0.25,
      diffuse: 0.4,
      specular: 0.3,
      roughness: 0.008,
      reflection: 0.4
    };
  }

  Sphere.prototype.toString = function(formStr) {
    return "sphere {\n  " + (getPos(this.pos)) + ", " + this.radius + "\n  pigment { " + (getProps(this.pigment)) + " }\n  finish { " + (getProps(this.finish)) + " }\n}\n";
  };

  return Sphere;

})();

exports.World = World = (function() {
  function World(header) {
    this.header = header;
    this.spheres = [];
  }

  World.prototype.toString = function() {
    return this.header + this.renderSpheres();
  };

  World.prototype.renderSpheres = function() {
    var list;
    list = this.spheres.map(function(s) {
      return s.toString();
    });
    return list.join('\n');
  };

  return World;

})();

header = "#version 3.6;\nglobal_settings { assumed_gamma 1.0 }\n#default { finish { ambient 0.1 diffuse 0.9 } }\n\n#include \"colors.inc\"\n#include \"textures.inc\"\n\ncamera {\n  location  <0.0, 0.0, 20.0>\n  look_at <0.0, 0.0, 200.0>\n  right x*image_width/image_height\n  angle 75\n}\n\nlight_source{<1500,3000,-2500> color White}\n\n/* background { color rgb <1, 1, 1> } */\n\n/*\nfog {\n  fog_type   2\n  distance   125\n  color      rgb<0.1,0.1,0.4>\n  fog_offset 0.1\n  fog_alt    0.5\n  turbulence 0.2\n}\n\nplane {\n  <0,1,0>, -10\n  texture {\n    pigment {rgb <0.1, 0.1, 0.1>}\n    finish {\n      ambient 0.02\n      diffuse 0.15\n      brilliance 6.0\n      phong 0.3\n      phong_size 120\n      reflection 0.6\n    }\n  }\n  normal {\n    bozo 1.75\n    scale <2.0,1,0.3> * 1.20\n    rotate<0,10,0>\n    turbulence 0.9\n  }\n}\n*/\n";

main = function() {
  var c, color, h, i, l, opts, pos, size, world, xr, yr, zr, _i;
  world = new World(header);
  for (i = _i = 1; _i <= 60000; i = ++_i) {
    xr = Math.random();
    yr = Math.random();
    zr = Math.random();
    pos = [(xr - 0.5) * 80 + zr * 10, (yr - 0.5) * 60, 60 + (zr * 120)];
    h = ((xr - 0.22 * Math.random()) * 360 + 360) % 360;
    c = Color({
      h: h,
      s: 100,
      l: 50
    });
    color = c.rgbArray().map(function(c) {
      return c / 255;
    });
    l = 0.2;
    size = (1 - Math.abs(xr - 0.5)) * l + (1 - Math.abs(yr - 0.5)) * l + (1 - Math.abs(zr - 0.5)) * l;
    world.spheres.push(new Sphere(pos, size, color));
  }
  opts = {
    output: __dirname + '/../private/out.png',
    highQuality: true
  };
  return render(world.toString(), opts, function(err) {
    if (err) {
      throw err;
    }
  });
};

main();
